/***************************************************************************//**
 * @file
 * @brief Core application logic.
 *******************************************************************************
 * # License
 * <b>Copyright 2020 Silicon Laboratories Inc. www.silabs.com</b>
 *******************************************************************************
 *
 * SPDX-License-Identifier: Zlib
 *
 * The licensor of this software is Silicon Laboratories Inc.
 *
 * This software is provided 'as-is', without any express or implied
 * warranty. In no event will the authors be held liable for any damages
 * arising from the use of this software.
 *
 * Permission is granted to anyone to use this software for any purpose,
 * including commercial applications, and to alter it and redistribute it
 * freely, subject to the following restrictions:
 *
 * 1. The origin of this software must not be misrepresented; you must not
 *    claim that you wrote the original software. If you use this software
 *    in a product, an acknowledgment in the product documentation would be
 *    appreciated but is not required.
 * 2. Altered source versions must be plainly marked as such, and must not be
 *    misrepresented as being the original software.
 * 3. This notice may not be removed or altered from any source distribution.
 *
 * Date:        08-07-2021
 * Author:      Dave Sluiter
 * Description: This code was created by the Silicon Labs application wizard
 *              and started as "Bluetooth - SoC Empty".
 *              It is to be used only for ECEN 5823 "IoT Embedded Firmware".
 *              The MSLA referenced above is in effect.
 *
 ******************************************************************************/


#include "app.h"

// Include logging for this file
#define INCLUDE_LOG_DEBUG 1
#include "src/log.h"
#include "em_usart.h"
#include "src/timers.h"

// Size of the buffer for received data
#define BUFLEN  80
// Receive data buffer
extern uint8_t buffer[BUFLEN];
extern bool receive;
// Current position ins buffer
extern uint32_t inpos;
extern uint32_t outpos;

uint8_t dist_ultrasonic = 0;


/*****************************************************************************
 * Application Power Manager callbacks
 *****************************************************************************/
#if defined(SL_CATALOG_POWER_MANAGER_PRESENT)



bool app_is_ok_to_sleep(void)
{

  return APP_IS_OK_TO_SLEEP;

} // app_is_ok_to_sleep()



sl_power_manager_on_isr_exit_t app_sleep_on_isr_exit(void)
{

  return APP_SLEEP_ON_ISR_EXIT;

} // app_sleep_on_isr_exit()



#endif // defined(SL_CATALOG_POWER_MANAGER_PRESENT)

/**************************************************************************//**
 * Application Init.
 *****************************************************************************/
SL_WEAK void app_init(void)
{
  // Put your application 1-time init code here
  // This is called once during start-up.
  // Don't call any Bluetooth API functions until after the boot event.
  //initialize GPIO module
  gpioInit();

  //initialize oscillator
  oscillator_init();

  //initialize timer
  mytimer_init();

  // Chip errata
  CHIP_Init();

  // Init DCDC regulator with kit specific parameters
  EMU_DCDCInit_TypeDef dcdcInit = EMU_DCDCINIT_DEFAULT;
  EMU_DCDCInit(&dcdcInit);

  // Initialization
  initGpio();
  initUsart2();

#if (LOWEST_ENERGY_MODE > 2)
  //LOG_INFO("Lowest Energy mode possible is EM2, changing to EM2");
  LOWEST_ENERGY_MODE = 2;
#endif

#if ((LOWEST_ENERGY_MODE > 0) & (LOWEST_ENERGY_MODE < 3))
  //LOG_INFO("Applying Pwr Mgr requirement of %d\n\r", (int) LOWEST_ENERGY_MODE);
  if(LOWEST_ENERGY_MODE == 2)
    sl_power_manager_add_em_requirement(SL_POWER_MANAGER_EM2);
  else if(LOWEST_ENERGY_MODE == 1)
    sl_power_manager_add_em_requirement(SL_POWER_MANAGER_EM1);
#endif

  //enable interrupt for LETIMER0 in NVIC
//  NVIC_ClearPendingIRQ(LETIMER0_IRQn);
//  NVIC_EnableIRQ(LETIMER0_IRQn);
//  NVIC_ClearPendingIRQ(GPIO_EVEN_IRQn);
//  NVIC_EnableIRQ(GPIO_EVEN_IRQn);

//  char welcomeString[] = "LEUART try\r\n";
//  for(uint32_t i=0; welcomeString[i] != 0; i++) {
//      txBuffer[i] = welcomeString[i];
//  }
//
    //LEUART_IntSet(LEUART0, LEUART_IFS_TXC);
//  NVIC_ClearPendingIRQ(GPIO_ODD_IRQn);
//  NVIC_EnableIRQ(GPIO_ODD_IRQn);

}




/**************************************************************************//**
 * Application Process Action.
 *****************************************************************************/
SL_WEAK void app_process_action(void)
{
  // This is called repeatedly from the main while(1) loop
  // Notice: This function is not passed or has access to Bluetooth stack events.
  //         We will create/use a scheme that is far more energy efficient in
  //         later assignments.

  //uint32_t evt;

  //evt = getNextEvent();         //get event to be executed from scheduler

  //temperature_state_machine(evt);


  dist_ultrasonic = get_processed_data_from_ultrasonic_sensor();
  if(dist_ultrasonic !=0)
    {
      LOG_INFO("Distance = %d\r\n", dist_ultrasonic);
    }
  timerWaitUs_polled(5000);

  /*gpioLed0SetOn();
  timerWaitUs(500000);
  gpioLed0SetOff();
  timerWaitUs(500000);*/

  //int i=0;

  //printf("Waiting for uart data\n");
  // When notified by the RX handler, start processing the received data
//  if (rxDataReady) {
//      printf("rx data ready\n");
//    LEUART_IntDisable(LEUART0, LEUART_IEN_RXDATAV); // Disable interrupts
////      for (i = 0; rxBuffer[i] != 0; i++) {
////        txBuffer[i] = rxBuffer[i]; // Copy rxBuffer into txBuffer
////      }
////      txBuffer[i] = '\0';
//    rxDataReady = 0; // Indicate that we need new data
//    LEUART_IntEnable(LEUART0, LEUART_IEN_RXDATAV | LEUART_IEN_TXC); // Re-enable interrupts
//    LEUART_IntSet(LEUART0, LEUART_IFS_TXC);
//  }
//
//  EMU_EnterEM2(false);

//  int i;

      // Zero out buffer
//      for (i = 0; i < BUFLEN; i++)
//        buffer[i] = 0;


 /*     if(inpos == 60)
        {
          USART_IntDisable(USART1, USART_IEN_RXDATAV);

          for (i = 0; i < BUFLEN; i++)
                  printf("%d", buffer[i]);

          for (i = 0; i < BUFLEN; i++)
                  buffer[i] = 0;

          USART_IntClear(USART2, 0xFFFFFFFF);
          USART_IntEnable(USART1, USART_IEN_RXDATAV);

          inpos = 0;
        }

      outpos = 0;
*/

      // Enable receive data valid interrupt
      //USART_IntEnable(USART1, USART_IEN_RXDATAV);


      // Disable receive data valid interrupt
      //USART_IntDisable(USART1, USART_IEN_RXDATAV);

//      // Enable transmit buffer level interrupt
//      USART_IntEnable(USART0, USART_IEN_TXBL);


      // Reset buffer indices



}

/**************************************************************************//**
 * Bluetooth stack event handler.
 * This overrides the dummy weak implementation.
 *
 * @param[in] evt Event coming from the Bluetooth stack.
 *
 * The code here will process events from the Bluetooth stack. This is the only
 * opportunity we will get to act on an event.
 *****************************************************************************/
void sl_bt_on_event(sl_bt_msg_t *evt)
{

  // Just a trick to hide a compiler warning about unused input parameter evt.
  // We will add real functionality here later.
  /*if (evt->header) {
      printf(".\n");
  }*/

  // Some events require responses from our application code,
  // and donâ€™t necessarily advance our state machines.
  // For assignment 5 uncomment the next 2 function calls
//  handle_ble_event(evt); // put this code in ble.c/.h

#if DEVICE_IS_BLE_SERVER
  //FOR SERVER
  // sequence through states driven by events
//  temperature_state_machine(evt);    // put this code in scheduler.c/.h

#else
  //FOR CLIENT
  discovery_state_machine(evt);

#endif

} // sl_bt_on_event()

