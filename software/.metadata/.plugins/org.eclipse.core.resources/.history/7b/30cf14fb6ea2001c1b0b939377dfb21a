/*
 * irq.c
 *
 * Function to
 *  Created on: Sep 8, 2021
 *      Author: salon
 */

// Include logging for this file
#define INCLUDE_LOG_DEBUG 1
#include "src/log.h"

#include "app.h"
#include "src/irq.h"

uint32_t encoder_pulses_A = 0;

uint32_t letimerMilliseconds() {
  uint32_t time_ms;
  ble_data_struct_t *bleData = getBleDataPtr();
  time_ms = ((bleData->rollover_cnt)*3000);
  return time_ms;
}

void LETIMER0_IRQHandler(void) {

  ble_data_struct_t *bleData = getBleDataPtr();

  // determine pending interrupts in peripheral
  uint32_t reason = LETIMER_IntGetEnabled(LETIMER0);
  // clear pending interrupts in peripheral
  LETIMER_IntClear(LETIMER0, reason);

  //check for COMP1 interrupt
  if(reason & LETIMER_IF_COMP1) {

      //disable COMP1 interrupt of timer peripheral
      LETIMER_IntDisable(LETIMER0, LETIMER_IEN_COMP1);

      //set scheduler event
      schedulerSetEventCOMP1();
  }

  //check for UF interrupt
  if(reason & LETIMER_IF_UF) {

      //set scheduler event
      schedulerSetEventUF();
      encoder_pulses_A = 0;

      bleData->rollover_cnt+=1;

  }

}

void I2C0_IRQHandler(void) {

  I2C_TransferReturn_TypeDef transferStatus;

  //get I2C transfer status
  transferStatus = I2C_Transfer(I2C0);

  //check if I2C transfer is done
  if(transferStatus == i2cTransferDone) {

      //disable I2C transfer
      NVIC_DisableIRQ(I2C0_IRQn);

      //set scheduler event
      schedulerSetEventTransferDone();
  }

  if(transferStatus < 0) {

      LOG_ERROR("I2C_TStatus %d : failed\n\r", (uint32_t)transferStatus);

  }
}

//void GPIO_EVEN_IRQHandler(void) {
//
//  ble_data_struct_t *bleData = getBleDataPtr();
//
//  // determine pending interrupts in peripheral
//  uint32_t reason = GPIO_IntGet();
//
//  GPIO_IntClear(reason);
//
//  //get the push button status
//  uint8_t button_status = GPIO_PinInGet(PB0_port, PB0_pin);
//
//  //check if the interrupt triggered was from PB0
//  if(reason == 64) {
//
//      if(!button_status) {
//          bleData->button_pressed = true;
//          schedulerSetEventButtonPressed();
//      }
//
//      else {
//          bleData->button_pressed = false;
//          schedulerSetEventButtonReleased();
//      }
//  }
//}


/**************************************************************************//**
 * @brief
 *    The USART0 receive interrupt saves incoming characters.
 *****************************************************************************/
void USART2_RX_IRQHandler(void)
{
  uint32_t received_data = 0;
  uint32_t flags = USART_IntGet(USART2);
  USART_IntClear(USART2, flags);
  uint8_t received_char = 0;


  // Get the character just received
  //received_data = USART2->RXDATA;
  received_char = (uint8_t)USART2->RXDATA;

  //buf[inpos] = ~buf[inpos];

  //if character is received save it to Fifo
  if(cbfifo_length(&cbfifo_receive) != cbfifo_capacity(&cbfifo_receive)) //if fifo not full
    {
      //entering critical section
      // enter critical section
        CORE_DECLARE_IRQ_STATE;
        CORE_ENTER_CRITICAL();
//      masking_state = __get_PRIMASK();
//      __disable_irq();
      cbfifo_enqueue(&cbfifo_receive, &received_char, sizeof(received_char));
//      __set_PRIMASK(masking_state);
    }
    else
    {
      //character discarded when queue is full
    }


//  if(buf[inpos] == 'R')
//    {
//      USART_IntDisable(USART2, USART_IEN_RXDATAV);
//      for(int i=0; i<20; i++)
//        {
//
//          printf("%d\n\r", (int)buf[i]);
//          buf[i] = 0;
//        }
//
////      printf("%d\n\r", (int)buffer[inpos]);
//      inpos = 0;
//      USART_IntClear(USART2, 0xFFFFFFFF);
//      USART_IntEnable(USART2, USART_IEN_RXDATAV);
//
//    }
//  else
//    {
//      inpos++;
//    }

//  // Exit loop on new line or buffer full
//  if ((buffer[inpos] != '\r') && (inpos < BUFLEN))
//    {
//      inpos++;
//
////      USART_IntDisable(USART2, USART_IEN_RXDATAV);
//      //printf("%d\n\r", &received_data);
////      timerWaitUs_polled(500);
////      USART_IntEnable(USART2, USART_IEN_RXDATAV);
//    }
//
////  else
//    receive = false;   // Stop receiving on CR
}

/** -------------------------------------------------------------------------------------------
* Interrupt handler for Even GPIOs
*-------------------------------------------------------------------------------------------- **/
void GPIO_EVEN_IRQHandler()
{
  //Getting reason behind raised interrupt
  uint32_t reason = GPIO_IntGet();

  //Clearing an interrupt
  GPIO_IntClear(reason);

  CORE_DECLARE_IRQ_STATE;
  CORE_ENTER_CRITICAL();
  if(reason == 64)
  {
    if(GPIO_PinInGet(PB0_port, PB0_pin) == false)
      schedulerSetEventButtonPressed();
    else if(GPIO_PinInGet(PB0_port, PB0_pin) == true)
      schedulerSetEventButtonReleased();
  }
  else if(reason == 1024)
  {
    encoder_pulses_A++;
    reason = 0;
    //scheduler_set_event_proximity_detected();
    //Interuupt on proximity received
  }

  CORE_EXIT_CRITICAL();


} // GPIO_EVEN_IRQHandler()

#if !DEVICE_IS_BLE_SERVER

void GPIO_ODD_IRQHandler(void) {

  ble_data_struct_t *bleData = getBleDataPtr();

  // determine pending interrupts in peripheral
  uint32_t reason = GPIO_IntGet();

  GPIO_IntClear(reason);

  //get the push button status
  uint8_t button_status = GPIO_PinInGet(PB1_port, PB1_pin);

  //check if the interrupt triggered was from PB1
  if(reason == 128) {

      if(!button_status) {
          bleData->pb1_button_pressed = true;
          schedulerSetEventButtonPressed();
      }

      else {
          bleData->pb1_button_pressed = false;
          schedulerSetEventButtonReleased();
      }
  }
}

#endif
